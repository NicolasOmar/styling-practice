.story {
  &__pictures {
    background-color: $color-primary;
    /*
      [grid-column] value is setted like this
        grid-column: [in_which_column_part_will_start] / [in_which_column_part_will_end]
      Doing it like this makes code more readable to new users (having the name asignations at hand)
    */
    grid-column: full-start / col-end 4;
    background-image: linear-gradient(
        rgba($color-primary, 0.5),
        rgba($color-primary, 0.5)
      ),
      url('../img/back.jpg');
    background-size: cover;
    display: grid;
    grid-template-rows: repeat(6, 1fr);
    grid-template-columns: repeat(6, 1fr);
    align-items: center;

    @media only screen and (max-width: $bp-medium) {
      grid-column: 1 / -1;
      padding: 6rem;
    }
  }

  &__img {
    &--1 {
      width: 100%;
      grid-row: 2 / span 4;
      grid-column: 2 / span 4;
      box-shadow: 0 2rem 5rem rgba($color-black, 0.1);

      @media only screen and (max-width: $bp-medium) {
        grid-column: 1 / 5;
        grid-row: 1 / -1;
      }
    }

    &--2 {
      /*
        - This particular image should be displayed overflowing its container's grid layout.
        - To do so, you shoud increase image's width a bit more than its 100% and adding a bigger z-index to be shown overlapping its container's grid as well as its content
      */
      width: 115%;
      grid-row: 4 / 6;
      grid-column: 4 / 7;
      box-shadow: 0 2rem 5rem rgba($color-black, 0.1);
      z-index: 10;

      @media only screen and (max-width: $bp-medium) {
        grid-row: 1 / -1;
        width: 100%;
      }
    }
  }

  &__content {
    background-color: $color-grey-light-1;
    grid-column: col-start 5 / full-end;
    /* Is adviced to use vw (viewport units) to adjust containers using viewport point of view and avoiding positioning problems on responsive layouts */
    padding: 6rem 8vw;
    /*
      - The code below is to give example you can mix grid and flex layouts if is needed
      - Is adviced to use in one-dimensional layouts
    */
    /*
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: flex-start;
    */
    /* The same implementation using grid goes like this */
    display: grid;
    align-content: center;
    justify-items: start;

    @media only screen and (max-width: $bp-medium) {
      grid-column: 1 / -1;
      grid-row: 5 / 6;
    }
  }

  &__text {
    font-size: 1.5rem;
    font-style: italic;
    margin-bottom: 4rem;
  }
}
