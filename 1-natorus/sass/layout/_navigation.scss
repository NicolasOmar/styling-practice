.navigation {
  &__checkbox {
    display: none;
  }

  &__button {
    background-color: $color-white;
    height: 7rem;
    width: 7rem;
    border-radius: 50%;
    position: fixed;
    top: 6rem;
    right: 6rem;
    z-index: 2000;
    box-shadow: 0 1rem 3rem rgba($color-black, 0.1);
    text-align: center;
    cursor: pointer;

    @include respond(tab-portail) {
      top: 4rem;
      right: 4rem;
    }
  }

  &__background {
    height: 6rem;
    width: 6rem;
    border-radius: 50%;
    /* Does not change element's position and takes it out from DOM flow */
    position: fixed;
    top: 6.5rem;
    right: 6.5rem;
    /* [radial-gradient] is similar to its sibiling linear, with the difference that the color starts from the center of the element */
    background-image: radial-gradient(
      $color-primary-light,
      $color-primary-dark
    );
    z-index: 1000;
    /*
      In case you want to use a custom transition style, you should include a [cubic-bezier] function with its parameters to create the desired effect
      For reproducible examples, go to: easings.net
    */
    transition: transform 0.8s cubic-bezier(0.86, 0, 0.07, 1);

    @include respond(tab-portail) {
      top: 4.5rem;
      right: 4.5rem;
    }
  }

  &__nav {
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    z-index: 1500;
    /*
      Using [opacity: 0] to hide the content will make the rest of the elements disabled
      But adding [width: 0] will fix the problem
    */
    opacity: 0;
    width: 0;
    transition: all 0.8s cubic-bezier(0.86, -0.55, 0.265, 1.55);
  }

  &__list {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    text-align: center;
  }

  &__item {
    list-style: none;
  }

  &__link {
    &:link,
    &:visited {
      display: inline-block;
      font-size: 3rem;
      font-weight: 300;
      padding: 1rem 2rem;
      color: $color-white;
      text-decoration: none;
      text-transform: uppercase;
      background-image: linear-gradient(
        120deg,
        transparent 0%,
        transparent 50%,
        $color-white 50%
      );
      /*
        Changing element's [background-size], you are moving it from its original place
        That will be reseted once user hovers the mentioned
      */
      background-size: 250%;
      transition: all 0.5s;
    }

    &:hover,
    &:active {
      /* Once the link is hovered or active, background position is restarted */
      background-position: 100%;
      color: $color-primary;
      transform: translateX(1rem);
    }

    span {
      margin-right: 1.25rem;
      display: inline-block;
    }
  }

  &__checkbox:checked ~ &__background {
    transform: scale(80);
  }

  &__checkbox:checked ~ &__nav {
    opacity: 1;
    width: 100vw;
  }

  /* The famous burger button can be made from a span and including its before and after pseudoelements */
  &__icon {
    position: relative;
    margin-top: 3.5rem;

    &,
    &::before,
    &::after {
      width: 3rem;
      height: 2px;
      background-color: $color-grey-darkest;
      display: inline-block;
    }

    &::before,
    &::after {
      content: '';
      position: absolute;
      left: 0;
      transition: all 0.2s;
    }

    &::before {
      top: -0.8rem;
    }

    &::after {
      top: 0.8rem;
    }
  }

  &__button:hover &__icon {
    &::before {
      top: -1rem;
    }

    &::after {
      top: 1rem;
    }
  }

  /*
    First, you select the checkbox when is checked
    Then, you select its closest sibiling with __button class in it
    And at last, you find its child with __icon class
  */
  &__checkbox:checked + &__button &__icon {
    background-color: transparent;

    &::before {
      top: 0;
      transform: rotate(45deg);
    }

    &::after {
      top: 0;
      transform: rotate(-45deg);
    }
  }
}
